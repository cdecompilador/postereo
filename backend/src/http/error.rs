use axum::extract::*;
use axum::http::StatusCode;
use axum::response::{IntoResponse, Response};

/// Common error type used throughout the http API compatible with anyhow and 
/// axum
#[derive(thiserror::Error, Debug)]
pub enum Error {
    /// Return a `401 Unauthorized`
    #[error("authentication required")]
    Unauthorized,

    /// Return a `403 Forbidden`
    #[error("user may not perform that action")]
    Forbidden,

    /// Return a `404 Not Found`
    #[error("request path not found")]
    NotFound,

    /// Return a `422 Unprocessable Entity`
    #[error("request body is invalid")]
    UnprocessableEntity,

    /// Automatically return a `500 Internal Server Error` on a `sqlx::Error`
    /// without context for security reasons
    ///
    /// Note that constraint errors are not included into this ones, those will
    /// be handled by `Error::UnprocessableEntity` with the `constraint` in
    /// `ResultExt`
    #[error("an error occured with the database")]
    Sqlx(#[from] sqlx::Error),
    
    /// Automatically return a `500 Internal Server Error` on `anyhow::Error`
    ///
    /// This errors may not be fatal and thanks to anyhow backtrace with 
    /// `context()` will be easy to track down. Via the autogenerated 
    /// `From<anyhow::Error>` that `thiserror` gives up we can now use `?` in 
    /// handler functions to automatically convert `anyhow::Error` -> `Error`
    /// -> `Response`
    ///
    /// Like `Error::Sqlx` doesn't return context to user
    // hello
    #[error("an internal server error occured")]
    Anyhow(#[from] anyhow::Error)
}

impl Error {
    fn status_code(&self) -> StatusCode {
        match self {
            Self::Unauthorized => StatusCode::UNAUTHORIZED,
            Self::Forbidden    => StatusCode::FORBIDDEN,
            Self::NotFound     => StatusCode::NOT_FOUND,
            Self::UnprocessableEntity => StatusCode::UNPROCESSABLE_ENTITY,
            Self::Sqlx(_) | Self::Anyhow(_) => StatusCode::INTERNAL_SERVER_ERROR
        }
    }
}

/// Axum allows you to return `Result` from handler functions, but the error 
/// type must also be a valid response.
///
/// By default, the generated `Display` impl is used to return a plaintext 
/// error message.
impl IntoResponse for Error {
    fn into_response(self) -> Response {
        // Handle logging before sending response
        match &self {
            Error::Sqlx(ref e)   => log::error!("SQLx error: {:?}", e),
            Error::Anyhow(ref e) => log::error!("Generic error: {:?}", e),
            _ => {}
        }

        (   
            self.status_code(), 
            Json(serde_json::json!({
                "error": self.to_string()
            }))
        ).into_response()
    }
}
